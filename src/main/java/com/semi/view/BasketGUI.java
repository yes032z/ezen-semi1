/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.semi.view;

import com.semi.basket.model.BasketDAO;
import com.semi.person.model.PersonService;
import com.semi.view.model.ViewDTO;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ezen
 */
public class BasketGUI extends javax.swing.JFrame implements ActionListener, ItemListener{
    private BasketDAO basketDao;
    private DefaultTableModel model=new DefaultTableModel();
    private JCheckBox cbChoice=new JCheckBox();
    private int sumPrice=0;
    private int tableRow=0;
    /**
     * Creates new form Market
     */
    public BasketGUI() {
        initComponents();
        
        init();
        addEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbBody = new javax.swing.JTable();
        btBuy = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        tfSumPrice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btMydata = new javax.swing.JButton();
        btMarket = new javax.swing.JButton();
        btBoard = new javax.swing.JButton();
        btMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("장바구니");

        tbBody.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "선택", "상품명", "수량", "가격"
            }
        ));
        jScrollPane1.setViewportView(tbBody);

        btBuy.setText("구매");

        btDelete.setText("삭제");

        tfSumPrice.setEditable(false);

        jLabel1.setText("총 주문금액");

        btMydata.setText("내정보");

        btMarket.setText("마켓");

        btBoard.setText("게시판");

        btMain.setText("홈");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(tfSumPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(280, 280, 280)
                        .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btMain, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btMydata, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btMydata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btMarket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btMain, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btBuy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfSumPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btDelete))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasketGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasketGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasketGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasketGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BasketGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBoard;
    private javax.swing.JButton btBuy;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btMain;
    private javax.swing.JButton btMarket;
    private javax.swing.JButton btMydata;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBody;
    private javax.swing.JTextField tfSumPrice;
    // End of variables declaration//GEN-END:variables

    private void init() {
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        basketDao=new BasketDAO();
        
        try {
            basketShowAll();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void addEvent() {
        btBuy.addActionListener(this);
        btDelete.addActionListener(this);
        cbChoice.addActionListener(this);
        btBoard.addActionListener(this);
        btMain.addActionListener(this);
        btMydata.addActionListener(this);
        btMarket.addActionListener(this);
        tbBody.addMouseListener(new EventHandler());
    }

    class EventHandler extends MouseAdapter{

        @Override
        public void mousePressed(MouseEvent e) {
            if(e.getSource()==tbBody){
                if(tbBody.getSelectedColumn()!=0){
                    return;
                }
                if(tfSumPrice.getText().equals("0")){
                    sumPrice=0;
                }
                int row=tbBody.getSelectedRow();
                Object obj=tbBody.getValueAt(row, 0);
                boolean bool= (boolean) obj;
                
                if(!bool){
                    Object objQty=tbBody.getValueAt(row, 3);
                    Object objPrice=tbBody.getValueAt(row, 4);
                    int price=Integer.parseInt((String)objQty)*Integer.parseInt((String)objPrice);
                    sumPrice+=price;
                }else{
                    Object objQty=tbBody.getValueAt(row, 3);
                    Object objPrice=tbBody.getValueAt(row, 4);
                    int price=Integer.parseInt((String)objQty)*Integer.parseInt((String)objPrice);
                    sumPrice-=price;
                }
            }
                tfSumPrice.setText(sumPrice+"");
            }
        }

    @Override
    public void actionPerformed(ActionEvent e) {
        List<Integer> list=new ArrayList<>();
        List<Integer> list2=new ArrayList<>();
        boolean bool=false;
        if(e.getSource()==btDelete){
            if(tbBody.getSelectedColumn()!=0){
                    return;
                }
            for(int i=0;i<tableRow;i++){
                Object ob=tbBody.getValueAt(i, 0);
                Object obno=tbBody.getValueAt(i, 1);
                
                String sno=(String)obno;
                int no =Integer.parseInt(sno);
                bool=(boolean)ob;
                if(bool){
                    list.add(no);
                    list2.add(i);
                }
            }
            tfSumPrice.setText("0");
            try {
                pdDel(list);
                basketShowAll();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
        }else if(e.getSource()==btBuy){
            for(int i=0;i<tableRow;i++){
                Object obj=tbBody.getValueAt(i, 0);
                Object objno=tbBody.getValueAt(i, 1);
                String strno=(String)objno;
                int no=Integer.parseInt(strno);
                bool=(boolean) obj;
                if(bool){
                    list.add(no);
                }
            }
            OrderGUI f = new OrderGUI(list);
            f.show();
            f.tfSumPrice.setText(tfSumPrice.getText());
            this.dispose();
        }else if(e.getSource()==btBoard){
            BoarderGUI f = new BoarderGUI();
            f.show();
            this.dispose();
            
        }else if(e.getSource()==btMain){
            this.dispose();
            
        }else if(e.getSource()==btMarket){
            MarketMainGUI f = new MarketMainGUI();
            f.show();
            this.dispose();
        }else if(e.getSource()==btMydata){
            MemberInfo f = new MemberInfo();
            f.show();
            this.dispose();
        }
    }

    private void basketShowAll() throws SQLException {
        List<ViewDTO> list=new ArrayList<>();
        int personno=PersonService.getPersonno();
        list=basketDao.basketSelectAll(personno);
        
        Object[] colName={"선택","번호","상품명","수량","가격"};
        Object[][] data=new Object[list.size()][colName.length];
        for(int i=0;i<list.size();i++){
            ViewDTO dto=list.get(i);
            
            data[i][0]=false;
            data[i][1]=dto.getBasketno()+"";
            data[i][2]=dto.getPdName();
            data[i][3]=dto.getBasketqty()+"";
            data[i][4]=dto.getPrice()+"";
        }
        tableRow=list.size();
        model.setDataVector(data, colName);
        tbBody.setModel(model);
        tbBody.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        DefaultTableCellRenderer renderer = new MyDefaultTableCellRenderer();
        tbBody.getColumn("선택").setCellRenderer(renderer);
        tbBody.getColumn("선택").setCellEditor(new DefaultCellEditor(cbChoice));
        
        
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        cbChoice.getSelectedIcon();
    }
    
    private void pdDel(List<Integer> list) throws SQLException {
        int type=JOptionPane.showConfirmDialog(this, "삭제 하시겠습니까?","장바구니 상품 삭제 여부",JOptionPane.YES_NO_OPTION);
        if(type==JOptionPane.NO_OPTION){
            return;
        }
        int personno=PersonService.getPersonno();
        int cnt=0;
        for(int i=0;i<list.size();i++){
            cnt+=basketDao.deleteSelBasket(personno, list.get(i));
        }
        
        if(cnt>0 || cnt==list.size() ){
            JOptionPane.showMessageDialog(this, "삭제되었습니다.");
        }else {
            JOptionPane.showMessageDialog(this, "삭제 실패");
        }
    }
    
    class MyDefaultTableCellRenderer extends DefaultTableCellRenderer{
        
        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,boolean isSelected, boolean hasFocus,
                int row, int column) {
            /*JTable table : 현재 작업 중인 JTable
            Object value : 현재 작업 중인 JTable의 셀객체
            int row : 현재 작업 중인 row번호
            int column : 현재 작업 중인 column번호*/
            
            if(column==0){
                JCheckBox comp = null;
                comp = new JCheckBox();
                comp.setSelected(((Boolean)value).booleanValue());
                return comp;
            }else if(column==3) {
                JComboBox cb=new JComboBox();
                cb.addItem(value);
                return cb;
            }else {
                return null;
            }
        }
        
    }
}
    
