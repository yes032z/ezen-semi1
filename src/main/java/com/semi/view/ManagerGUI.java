/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.semi.view;

import com.semi.board.model.BoardDAO;
import com.semi.board.model.BoardDTO;
import com.semi.intostock.model.IntoStockDAO;
import com.semi.intostock.model.IntoStockDTO;
import com.semi.market.model.MarketDAO;
import com.semi.market.model.MarketDTO;
import com.semi.market.model.MarketService;
import com.semi.person.model.PersonDAO;
import com.semi.person.model.PersonDTO;
import com.semi.person.model.PersonService;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kcy15
 */
public class ManagerGUI extends javax.swing.JFrame implements ActionListener{
    private IntoStockDAO intostockDao;
    private BoardDAO boardDao;
    private PersonDAO personDao;
    private MarketDAO marketDao;
     
    
    private String[] MarketColNames={"상품코드","카테고리","상품명","묘/견", "가격","급여연령","알갱이","칼로리",
            "질병예방", "수량", "마켓등록일"};
    private DefaultTableModel MarketModel = new DefaultTableModel();
    
    private String[] boardColNames={"번호", "카테고리", "제목","작성자", "작성일","조회수","좋아요"};
    private DefaultTableModel boardModel = new DefaultTableModel();
    
    private String[] personColNames={"회원코드","이름","생년월일","전화번호","아이디",
        "닉네임","펫 이름", "이메일","우편번호","상세주소","포인트", "가입일자"};
    private DefaultTableModel personModel = new DefaultTableModel();
    
    private String[] IntoStColNames={"상품 코드", "상품명", "입고수량", "입고일"};
    private DefaultTableModel IntoModel = new DefaultTableModel();
    
    /**
     * Creates new form ManagerGUI
     */
    public ManagerGUI() {
        initComponents();
        
        init();
        addEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        tfPdNo = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMarket = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfProductNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfProductName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        btPdSearch = new javax.swing.JButton();
        btProductAdd = new javax.swing.JButton();
        btProductEd = new javax.swing.JButton();
        btProductDel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbdivi = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        tfEatAge = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfFsize = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfkcal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tfPredis = new javax.swing.JTextField();
        tfCategory = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbBoard = new javax.swing.JTable();
        tfBoardNo = new javax.swing.JTextField();
        btBoardDel = new javax.swing.JButton();
        tfTitle = new javax.swing.JTextField();
        tfNick = new javax.swing.JTextField();
        btBoarSearch = new javax.swing.JButton();
        rdBoardNo = new javax.swing.JRadioButton();
        rdTitle = new javax.swing.JRadioButton();
        rdNick = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbPerson = new javax.swing.JTable();
        btPerDelete = new javax.swing.JButton();
        tfPerNo = new javax.swing.JTextField();
        tfPerName = new javax.swing.JTextField();
        tfPerId = new javax.swing.JTextField();
        btPerSearch = new javax.swing.JButton();
        rdPerNo = new javax.swing.JRadioButton();
        rdPerName = new javax.swing.JRadioButton();
        rdPerId = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tfInPdNo = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbIntoStock = new javax.swing.JTable();
        btStSearch = new javax.swing.JButton();
        btStockAdd = new javax.swing.JButton();
        btStockEd = new javax.swing.JButton();
        btStockDel = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        tfInQty = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("관리자");

        tfPdNo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tfPdNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tfPdNoStateChanged(evt);
            }
        });

        tbMarket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "번호", "상품 코드", "카테고리", "상품명", "구분", "가격", "급여연령", "알갱이", "칼로리", "질병예방", "입고수량", "입고일", "마켓등록일"
            }
        ));
        jScrollPane1.setViewportView(tbMarket);

        jLabel1.setText("상품 코드");

        tfProductNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfProductNoActionPerformed(evt);
            }
        });

        jLabel2.setText("상품명");

        jLabel3.setText("가격");

        btPdSearch.setText("검색");

        btProductAdd.setText("등록");

        btProductEd.setText("수정");

        btProductDel.setText("삭제");

        jLabel5.setText("카테고리");

        jLabel6.setText("구분");

        cbdivi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "dog", "cat" }));

        jLabel7.setText("급여연령");

        jLabel8.setText("알갱이");

        jLabel9.setText("칼로리");

        jLabel10.setText("질병예방");

        tfCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btPdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btProductAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btProductEd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btProductDel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfProductNo, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(tfCategory)
                    .addComponent(tfProductName))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(24, 24, 24)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfPrice)
                    .addComponent(cbdivi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfEatAge, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfFsize, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfkcal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(12, 12, 12)
                        .addComponent(tfPredis, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(tfProductNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(tfCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(cbdivi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(12, 12, 12)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(tfEatAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfFsize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(tfkcal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(tfPredis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btPdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btProductAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btProductEd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btProductDel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tfPdNo.addTab("상품 관리", jPanel1);

        tbBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "번호", "카테고리", "제목", "닉네임", "작성일", "조회수", "좋아요"
            }
        ));
        jScrollPane2.setViewportView(tbBoard);

        btBoardDel.setText("삭제");

        btBoarSearch.setText("검색");

        buttonGroup1.add(rdBoardNo);
        rdBoardNo.setText("번호");

        buttonGroup1.add(rdTitle);
        rdTitle.setText("제목");

        buttonGroup1.add(rdNick);
        rdNick.setText("닉네임");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(rdBoardNo)
                        .addGap(18, 18, 18)
                        .addComponent(tfBoardNo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(rdTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(rdNick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNick, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addComponent(btBoarSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btBoardDel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBoardNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBoarSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdBoardNo)
                    .addComponent(rdTitle)
                    .addComponent(rdNick))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addGap(19, 19, 19)
                .addComponent(btBoardDel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tfPdNo.addTab("게시글 관리", jPanel2);

        tbPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "회원 번호", "이름", "생년월일", "전화번호", "아이디", "닉네임", "펫 이름", "이메일", "우편번호", "상세주소", "포인트", "가입일자"
            }
        ));
        jScrollPane3.setViewportView(tbPerson);

        btPerDelete.setText("삭제");

        btPerSearch.setText("검색");

        buttonGroup2.add(rdPerNo);
        rdPerNo.setText("회원 코드");

        buttonGroup2.add(rdPerName);
        rdPerName.setText("이름");

        buttonGroup2.add(rdPerId);
        rdPerId.setText("아이디");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(rdPerNo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfPerNo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(rdPerName)
                .addGap(23, 23, 23)
                .addComponent(tfPerName, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(rdPerId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfPerId, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addComponent(btPerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btPerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdPerNo)
                        .addComponent(tfPerNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rdPerName)
                        .addComponent(tfPerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rdPerId)
                        .addComponent(tfPerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btPerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btPerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tfPdNo.addTab("회원 관리", jPanel3);

        jLabel4.setText("상품 코드");

        tfInPdNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInPdNoActionPerformed(evt);
            }
        });

        tbIntoStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "상품 코드", "상품명", "입고수량", "입고일"
            }
        ));
        jScrollPane4.setViewportView(tbIntoStock);

        btStSearch.setText("검색");

        btStockAdd.setText("등록");

        btStockEd.setText("수정");

        btStockDel.setText("삭제");

        jLabel13.setText("입고 수량");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(594, Short.MAX_VALUE)
                .addComponent(btStSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btStockAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btStockEd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btStockDel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(tfInPdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jLabel13)
                .addGap(34, 34, 34)
                .addComponent(tfInQty, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfInPdNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(tfInQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 314, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btStSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btStockAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btStockEd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btStockDel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );

        tfPdNo.addTab("입고 관리", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfPdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(tfPdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfPdNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tfPdNoStateChanged
        JTabbedPane tp=(JTabbedPane)evt.getSource();
                int index=tp.getSelectedIndex();
                if(index==0){
                    clearTf();
                }else if(index==1){
                    clearTf2();
                }else if(index==2){
                    clearTf3();
                }
    }//GEN-LAST:event_tfPdNoStateChanged

    private void tfProductNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfProductNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfProductNoActionPerformed

    private void tfInPdNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInPdNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfInPdNoActionPerformed

    private void tfCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCategoryActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBoarSearch;
    private javax.swing.JButton btBoardDel;
    private javax.swing.JButton btPdSearch;
    private javax.swing.JButton btPerDelete;
    private javax.swing.JButton btPerSearch;
    private javax.swing.JButton btProductAdd;
    private javax.swing.JButton btProductDel;
    private javax.swing.JButton btProductEd;
    private javax.swing.JButton btStSearch;
    private javax.swing.JButton btStockAdd;
    private javax.swing.JButton btStockDel;
    private javax.swing.JButton btStockEd;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbdivi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton rdBoardNo;
    private javax.swing.JRadioButton rdNick;
    private javax.swing.JRadioButton rdPerId;
    private javax.swing.JRadioButton rdPerName;
    private javax.swing.JRadioButton rdPerNo;
    private javax.swing.JRadioButton rdTitle;
    private javax.swing.JTable tbBoard;
    private javax.swing.JTable tbIntoStock;
    private javax.swing.JTable tbMarket;
    private javax.swing.JTable tbPerson;
    private javax.swing.JTextField tfBoardNo;
    private javax.swing.JTextField tfCategory;
    private javax.swing.JTextField tfEatAge;
    private javax.swing.JTextField tfFsize;
    private javax.swing.JTextField tfInPdNo;
    private javax.swing.JTextField tfInQty;
    private javax.swing.JTextField tfNick;
    private javax.swing.JTabbedPane tfPdNo;
    private javax.swing.JTextField tfPerId;
    private javax.swing.JTextField tfPerName;
    private javax.swing.JTextField tfPerNo;
    private javax.swing.JTextField tfPredis;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfProductName;
    private javax.swing.JTextField tfProductNo;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfkcal;
    // End of variables declaration//GEN-END:variables

    private void init() {
        getContentPane().setBackground(Color.white);
        
        marketDao=new MarketDAO();
        intostockDao=new IntoStockDAO();
        boardDao=new BoardDAO();
        personDao=new PersonDAO();
        
        tfNick.setText(PersonService.getNickname());
        tfPerId.setText(PersonService.getId());
        
        tfProductNo.setText(MarketService.getPdno()+"");
        tfProductName.setText(MarketService.getPdName());
                
        tfInPdNo.setText(MarketService.getPdno()+"");
        
        String[] cbList2={"dog","cat"};
        DefaultComboBoxModel<String> cbmodel2=new DefaultComboBoxModel<>(cbList2);
        cbdivi.setModel(cbmodel2);
        
        try {
            showAllMarket();
            showAllBoard();
            showAllPerson();
            showAllIntoStock();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }

    private void addEvent() {
        btPdSearch.addActionListener(this);
        btProductAdd.addActionListener(this);
        btProductEd.addActionListener(this);
        btProductDel.addActionListener(this);
        tfProductNo.addActionListener(this);
        tfProductName.addActionListener(this);
        tfPrice.addActionListener(this);
        tfEatAge.addActionListener(this);
        tfFsize.addActionListener(this);
        tfPredis.addActionListener(this);
        tfkcal.addActionListener(this);
        tfCategory.addActionListener(this);
        cbdivi.addItemListener(new EventHandler());
        tbMarket.addMouseListener(new EventHandler());
        
        btBoarSearch.addActionListener(this);
        btBoardDel.addActionListener(this);
        tfBoardNo.addKeyListener(new KeyEventHandler());
        tfTitle.addKeyListener(new KeyEventHandler());
        tfNick.addKeyListener(new KeyEventHandler());
        tbBoard.addMouseListener(new EventHandler());
        
        btPerSearch.addActionListener(this);
        btPerDelete.addActionListener(this);
        tfPerNo.addKeyListener(new KeyEventHandler());
        tfPerName.addKeyListener(new KeyEventHandler());
        tfPerId.addKeyListener(new KeyEventHandler());
        tbPerson.addMouseListener(new EventHandler());
        
        tfInPdNo.addActionListener(this);
        tfInQty.addActionListener(this);
        btStSearch.addActionListener(this);
        btStockAdd.addActionListener(this);
        btStockDel.addActionListener(this);
        btStockEd.addActionListener(this);
        tbIntoStock.addMouseListener(new EventHandler());
    }

    class EventHandler extends MouseAdapter implements ItemListener{

        @Override
        public void mousePressed(MouseEvent e) {
            if(e.getSource()==tbMarket){
                int row=tbMarket.getSelectedRow();
                Object obj =tbMarket.getValueAt(row,1);
                int pdno = Integer.parseInt((String)obj);
                
                try {
                    showByNo(pdno);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }else if(e.getSource()==tbIntoStock){
                int row=tbIntoStock.getSelectedRow();
                Object obj =tbIntoStock.getValueAt(row,0);
                int pdno = Integer.parseInt((String)obj);
                
                try {
                    showByStNo(pdno);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }    
        
        @Override
        public void itemStateChanged(ItemEvent e) {
            
            if(e.getSource()==cbdivi){
                String catdog=(String)cbdivi.getSelectedItem();
                if(cbdivi.equals("dog")){
                    catdog="1";
                }else if(cbdivi.equals("cat")){
                    catdog="2";
                }
            }//if
        }
        
    }

    
    class KeyEventHandler extends KeyAdapter{

        @Override
        public void keyReleased(KeyEvent e) {
            
             if(e.getSource()==tfBoardNo){
                rdBoardNo.setSelected(true);
            }
            if(e.getSource()==tfTitle){
                rdTitle.setSelected(true);
            }
            if(e.getSource()==tfNick){
                rdNick.setSelected(true);
            }
            if(e.getSource()==tfPerNo){
                rdPerNo.setSelected(true);
            }
            if(e.getSource()==tfPerName){
                rdPerName.setSelected(true);
            }
            if(e.getSource()==tfPerId){
                rdPerId.setSelected(true);
            }//if
        }
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        if(e.getSource()==btBoarSearch){
            if(rdBoardNo.isSelected()){
                try {
                    searchByBoardNo();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }else if(rdTitle.isSelected()){
                try {
                    searchByTitle();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }else if(rdNick.isSelected()){
                try {
                    searchByNick();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }else if(e.getSource()==btBoardDel){
            try {
                deleteBoard();
                clearTf2();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btPerSearch){
            if(rdPerNo.isSelected()){
                try {
                    searchByPerNo();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }else if(rdPerName.isSelected()){
                try {
                    searchByPerName();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }else if(rdPerId.isSelected()){
                try {
                    searchByPerId();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }else if(e.getSource()==btPerDelete){
            try {
                deletePerson();
                clearTf3();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btPdSearch){
            try {
                searchByPdNo();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btProductEd){
            try {
                editIntoPd();
                clearTf();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btProductDel){
            try {
                deleteMarket();
                clearTf();
                showAllMarket();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btProductAdd){
            try {
                addStock();
                clearTf();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btStSearch){
            try {
                searchByStNo();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
        }else if(e.getSource()==btStockAdd){
            try {
                addIntoStock();
                clearTf4();
                showAllIntoStock();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btStockDel){
            try {
                deleteIntoStock();
                clearTf4();
                showAllIntoStock();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btStockEd){
            try {
                editIntoSt();
                clearTf4();
                showAllIntoStock();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }//if
    }
    
    
    //번호입고 뿌리기
    public void showByNo(int pdno) throws SQLException{
        IntoStockDTO dto=intostockDao.selectNo(pdno);
        
        tfProductNo.setText(pdno+"");
        tfCategory.setText(dto.getPdcategory());
        tfProductName.setText(dto.getPdname());
        cbdivi.setSelectedItem(dto.getCatdog());
        tfPrice.setText(dto.getPrice()+"");
        tfEatAge.setText(dto.getEatage());
        tfFsize.setText(dto.getFsize());
        tfkcal.setText(dto.getKcal()+"");
        tfPredis.setText(dto.getPredisease());
        
    }
    
    //상품 전체조회
    private void showAllMarket() throws SQLException {
        List<IntoStockDTO> listInto=intostockDao.MarketSelectAll();
        
        if(listInto==null || listInto.isEmpty()){
            JOptionPane.showMessageDialog(this, "상품이 없습니다.");
            return;
        }
        String[][] data=new String[listInto.size()][MarketColNames.length];
        for(int i=0; i<listInto.size(); i++){
            IntoStockDTO dto=listInto.get(i);
            
            data[i][0]=dto.getPdno()+"";
            data[i][1]=dto.getPdcategory();
            data[i][2]=dto.getPdname();
            data[i][3]=dto.getCatdog();
            data[i][4]=dto.getPrice()+"";
            data[i][5]=dto.getEatage();
            data[i][6]=dto.getFsize();
            data[i][7]=dto.getKcal()+"";
            data[i][8]=dto.getPredisease();
            data[i][9]=dto.getIntostqty()+"";
            data[i][10]=dto.getPdregdate()+"";
        }
        MarketModel.setDataVector(data, MarketColNames);
        tbMarket.setModel(MarketModel);
        
        tbMarket.getColumnModel().getColumn(0).setPreferredWidth(30);
        
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbMarket.getColumnModel().getColumn(0).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(1).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(2).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(3).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(4).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(5).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(8).setCellRenderer(dtcr);
        tbMarket.getColumnModel().getColumn(10).setCellRenderer(dtcr);
    }
    
    //상품 번호 조회
    private void searchByPdNo() throws SQLException {
        String pdno=tfProductNo.getText();
        System.out.println("상품번호 검색:"+pdno);
        
        if(pdno==null || pdno.isEmpty()){
            showAllMarket();
            return;
        }
        
        List<IntoStockDTO> listPd=intostockDao.marketSelectByPdNo(Integer.parseInt(pdno));
        if(listPd==null || listPd.isEmpty() || listPd.size()==0){
            JOptionPane.showMessageDialog(this, "해당 상품이 없습니다.");
        }
        
        
        String[][] data=new String[listPd.size()][MarketColNames.length];
        for(int i=0; i<listPd.size(); i++){
            IntoStockDTO dto=listPd.get(i);
            
            data[i][0]=dto.getPdno()+"";
            data[i][1]=dto.getPdcategory();
            data[i][2]=dto.getPdname();
            data[i][3]=dto.getCatdog();
            data[i][4]=dto.getPrice()+"";
            data[i][5]=dto.getEatage();
            data[i][6]=dto.getFsize();
            data[i][7]=dto.getKcal()+"";
            data[i][8]=dto.getPredisease();
            data[i][9]=dto.getIntostqty()+"";
            data[i][10]=dto.getIntostregdate()+"";
            data[i][11]=dto.getPdregdate()+"";
        }
        MarketModel.setDataVector(data, MarketColNames);
        tbMarket.setModel(MarketModel);
        
    }
    
    //상품입고 등록
     private void addStock() throws SQLException {

         //1. 값 받기
          String pdno=tfProductNo.getText(); 
          String pdcategory=tfCategory.getText();
          String pdname=tfProductName.getText(); 
          String catdog=(String)cbdivi.getSelectedItem();
          String price=tfPrice.getText(); 
          String eatage=tfEatAge.getText(); 
          String fsize=tfFsize.getText(); 
          String kcal=tfkcal.getText(); 
          String predisease=tfPredis.getText(); 
          
          
        //유효성 검사
        if(pdno==null ||pdno.isEmpty()){
            JOptionPane.showMessageDialog(this, "상품번호를 입력해주세요.");
            tfProductNo.requestFocus();
            return;
        }else if(pdname==null || pdname.isEmpty()){
            JOptionPane.showMessageDialog(this, "상품명을 입력해주세요.");
            tfProductName.requestFocus();
            return;            
        }else if(price==null || price.isEmpty()){
            JOptionPane.showMessageDialog(this, "가격을 입력해주세요.");
            tfPrice.requestFocus();
            return; 
        }else if(kcal==null || kcal.isEmpty()){
            JOptionPane.showMessageDialog(this, "칼로리를 입력해주세요.");
            tfkcal.requestFocus();
            return; 
        }
        
        //dto로 먼저 받고
        MarketDTO dto = new MarketDTO();
        
        dto.setPdno(Integer.parseInt(pdno));
        dto.setPdcategory(pdcategory);
        dto.setPdname(pdname);
        dto.setCatdog(catdog);
        dto.setPrice(Integer.parseInt(price));
        dto.setEatage(eatage);
        dto.setFsize(fsize);
        dto.setKcal(Double.parseDouble(kcal));
        dto.setPredisease(predisease);
        
        //dao로 보내서 처리
        int pd=marketDao.insertPd(dto);
         
         if(pd>0){
            JOptionPane.showMessageDialog(this, "상품 등록 성공");
            clearTf();
            showAllMarket();
         }else{
            JOptionPane.showMessageDialog(this, "상품 입고 실패");
         }
     }
    
    //상품 수정
    private void editIntoPd() throws SQLException {

        String pdno=tfProductNo.getText(); 
        String pdcategory=tfCategory.getText();
        String pdname=tfProductName.getText();
        String catdog=(String)cbdivi.getSelectedItem();
        String price=tfPrice.getText();
        String eatage=tfEatAge.getText();
        String fsize=tfFsize.getText();
        String kcal=tfkcal.getText();
        String predisease=tfPredis.getText();
        
        MarketDTO dto = new MarketDTO(Integer.parseInt(pdno), pdcategory, pdname, catdog, Integer.parseInt(price), fsize, eatage, Double.parseDouble(kcal), predisease);
                
        dto.setPdno(Integer.parseInt(pdno));
        dto.setPdcategory(pdcategory);
        dto.setPdname(pdname);
        dto.setCatdog(catdog);
        dto.setPrice(Integer.parseInt(price));
        dto.setEatage(eatage);
        dto.setFsize(fsize);
        dto.setKcal(Double.parseDouble(kcal));
        dto.setPredisease(predisease);
        
        int pd=marketDao.updatePd(dto);
        
        if(pd>0){
            JOptionPane.showMessageDialog(this, "수정 성공했습니다.");
            showAllMarket();
            clearTf();
        }else{
            JOptionPane.showMessageDialog(this, "수정 실패했습니다.");
        }
    }
    
    //상품관리 삭제
    private void deleteMarket() throws SQLException {
        String pdno=tfProductNo.getText();
        System.out.println("삭제할 번호:"+pdno);
        
        if(pdno==null || pdno.isEmpty()){
            JOptionPane.showConfirmDialog(this, "번호를 입력해주세요.");
            tfProductNo.requestFocus();
        }
        int type=JOptionPane.showConfirmDialog(this, pdno+"번 상품을 삭제하시겠습니까?",
                    "삭제", JOptionPane.YES_NO_OPTION);
        
        if(type==JOptionPane.YES_NO_OPTION){
            int cnt=marketDao.deleteMarketByNo(Integer.parseInt(pdno));
            
            if(cnt>0){
                JOptionPane.showMessageDialog(this, "삭제 완료되었습니다");
                clearTf();
                showAllMarket();
            }else{
                JOptionPane.showMessageDialog(this, "삭제 실패했습니다.");
            }
        }//if
    }
    
    //입고 관리
    //전체 조회
    private void showAllIntoStock() throws SQLException {
        List<IntoStockDTO> list= intostockDao.IntoStockSelectAll();
        
        //유효성
        if(list==null || list.isEmpty()){
            JOptionPane.showMessageDialog(this, "입고상품이 없습니다.");
            return;
        }
        
        String[][] data=new String[list.size()][IntoStColNames.length];
        for(int i=0; i<list.size(); i++){
            IntoStockDTO dto=list.get(i);
            
            data[i][0]=dto.getPdno()+"";
            data[i][1]=dto.getPdname();
            data[i][2]=dto.getIntostqty()+"";
            data[i][3]=dto.getIntostregdate()+"";
        }
        IntoModel.setDataVector(data, IntoStColNames);
        tbIntoStock.setModel(IntoModel);
    }
    
    //뿌려주기
    private void showByStNo(int pdno) throws SQLException {
        IntoStockDTO dto=intostockDao.selectIntoNo(pdno);
        
        tfInPdNo.setText(pdno+"");
        tfInQty.setText(dto.getIntostqty()+"");
        
    }
    //입고 번호 검색
    private void searchByStNo() throws SQLException {
        String pdno=tfInPdNo.getText();
        System.out.println("상품번호 검색:"+pdno);
        
        
        
        List<IntoStockDTO> list= intostockDao.IntoSelectByPdNo(Integer.parseInt(pdno));

        //유효성
        if(list==null || list.isEmpty()){
            JOptionPane.showMessageDialog(this, "상품이 없습니다.");
            return;
        }
        
        String[][] data = new String[list.size()][IntoStColNames.length];
        for(int i=0; i<list.size(); i++){
            IntoStockDTO dto=list.get(i);
            
            data[i][0]=dto.getPdno()+"";
            data[i][1]=dto.getPdname();
            data[i][2]=dto.getIntostqty()+"";
            data[i][3]=dto.getIntostregdate()+"";
            
        }
        IntoModel.setDataVector(data, IntoStColNames);
        tbIntoStock.setModel(IntoModel);
        
    }
    
    //입고 등록
    private void addIntoStock() throws SQLException {
        //값받기
        String pdno=tfInPdNo.getText();
        String inqty=tfInQty.getText();
        String pdname="";
        
        //
        if(pdno==null || pdno.isEmpty()){
            JOptionPane.showMessageDialog(this, "상품번호를 입력하세요.");
            return;
        }
        
        IntoStockDTO dto=new IntoStockDTO(Integer.parseInt(pdno), Integer.parseInt(inqty));
        MarketDTO dto2 = new MarketDTO(pdname);
        
        dto.setPdno(Integer.parseInt(pdno));
        dto2.setPdname(pdname);
        dto.setIntostqty(Integer.parseInt(inqty));
        
        //dao로 보내서 처리
        MarketDTO dto3=marketDao.getPdnoName(Integer.parseInt(pdno));
        dto.setPdno(dto3.getPdno());
        
        int st=intostockDao.insertIntoSt(dto);
        
        if(st>0){
            JOptionPane.showMessageDialog(this, "상품 입고 성공");
            clearTf4();
            showAllIntoStock();
        }else{
            JOptionPane.showMessageDialog(this, "상품 입고 실패");
            tfInPdNo.requestFocus();
        }
    }
    
    
    private void editIntoSt() throws SQLException {
        String pdno=tfInPdNo.getText()+"";
        String inqty=tfInQty.getText()+"";
        String pdname="";
        
        IntoStockDTO dto = new IntoStockDTO(Integer.parseInt(pdno), Integer.parseInt(inqty));
        MarketDTO dto2 = new MarketDTO(pdname);
        
        dto.getPdno();
        dto2.getPdname();
        dto.getIntostqty();

        MarketDTO dto3=marketDao.getPdnoName(Integer.parseInt(pdno));
        dto.setPdno(dto3.getPdno());
        int in=intostockDao.updateIntoSt(dto);
        
        if(in>0){
            JOptionPane.showMessageDialog(this, "수정 완료되었습니다.");
            clearTf4();
            showAllIntoStock();
        }else {
            JOptionPane.showMessageDialog(this, "수정 실패!");
            tfInPdNo.requestFocus();
        }
    }
    

    private void deleteIntoStock() throws SQLException {
        String pdno=tfInPdNo.getText();
        System.out.println("삭제할 번호:"+pdno);
        
        if(pdno==null || pdno.isEmpty()){
            JOptionPane.showConfirmDialog(this, "상품번호를 입력해주세요.");
            tfProductNo.requestFocus();
        }
        int type=JOptionPane.showConfirmDialog(this, pdno+"번 상품을 삭제하시겠습니까?",
                    "삭제", JOptionPane.YES_NO_OPTION);
        
        if(type==JOptionPane.YES_NO_OPTION){
            int cnt=intostockDao.deleteStockByNo(Integer.parseInt(pdno));
            
            if(cnt>0){
                JOptionPane.showMessageDialog(this, "삭제 완료되었습니다");
                clearTf4();
                showAllIntoStock();
            }else{
                JOptionPane.showMessageDialog(this, "삭제 실패했습니다.");
            }
        }//if
    }
    
    
    //게시판 전제조회
    private void showAllBoard() throws SQLException {
        List<BoardDTO> listB = boardDao.boardSelectAll();
        
        if(listB==null || listB.isEmpty()){
            JOptionPane.showMessageDialog(this, "게시물이 없습니다.");
            return;
        }
        
        String[][] data=new String[listB.size()][boardColNames.length];
        for(int i=0; i<listB.size(); i++){
            BoardDTO dto=listB.get(i);
            
            data[i][0]=dto.getBno()+"";
            data[i][1]=dto.getBcategory1();
            data[i][2]=dto.getBtitle();
            data[i][3]=dto.getNickname();
            data[i][4]=dto.getBregdate()+"";
            data[i][5]=dto.getBviewcnt()+"";
            data[i][6]=dto.getBgood()+"";
        }
        boardModel.setDataVector(data, boardColNames);
        tbBoard.setModel(boardModel);
        
        //
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbBoard.getColumnModel().getColumn(5).setCellRenderer(dtcr);
        tbBoard.getColumnModel().getColumn(6).setCellRenderer(dtcr);
    }

    //게시판 번호 조회
    private void searchByBoardNo() throws SQLException {
        String boardNo=tfBoardNo.getText();
        System.out.println("번호:"+boardNo);
        
        List<BoardDTO>list=boardDao.boardSelectByNo(Integer.parseInt(boardNo));
        
        if(list==null || list.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당 게시물이 없습니다.");
            //return;
        }
        
        String[][] data1=new String[list.size()][boardColNames.length];
        for(int i=0; i<list.size(); i++){
            BoardDTO dto=list.get(i);
            
            data1[i][0]=dto.getBno()+"";
            data1[i][1]=dto.getBcategory1();
            data1[i][2]=dto.getBtitle();
            data1[i][3]=dto.getNickname();
            data1[i][4]=dto.getBregdate()+"";
            data1[i][5]=dto.getBviewcnt()+"";
            data1[i][6]=dto.getBgood()+"";
        }
        boardModel.setDataVector(data1, boardColNames);
        tbBoard.setModel(boardModel);
        //
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(5).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(6).setCellRenderer(dtcr);
    }
    
    //게시판 제목 조회
    private void searchByTitle() throws SQLException {
        String title=tfTitle.getText();
        System.out.println("제목:"+title);
        
        List<BoardDTO>listT=boardDao.boardSelectByTitle(title);
        
        if(listT==null || listT.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당 게시물이 없습니다.");
            //return;
        }
        
        String[][] data2=new String[listT.size()][boardColNames.length];
        for(int i=0; i<listT.size(); i++){
            BoardDTO dto=listT.get(i);
            
            data2[i][0]=dto.getBno()+"";
            data2[i][1]=dto.getBcategory1();
            data2[i][2]=dto.getBtitle();
            data2[i][3]=dto.getNickname();
            data2[i][4]=dto.getBregdate()+"";
            data2[i][5]=dto.getBviewcnt()+"";
            data2[i][6]=dto.getBgood()+"";
        }
        
        boardModel.setDataVector(data2, boardColNames);
        tbBoard.setModel(boardModel);
        //
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(5).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(6).setCellRenderer(dtcr);
    }
    
    //게시판 닉네임 조회
    private void searchByNick() throws SQLException {
        String nick=tfNick.getText();
        System.out.println("닉네임:"+nick);
        
        List<BoardDTO> listN=boardDao.boardSelectByNick(nick);
        
        if(listN==null || listN.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당 게시물이 없습니다.");
            return;
        }
        
        String[][] data3=new String[listN.size()][boardColNames.length];
        for(int i=0; i<listN.size(); i++){
            BoardDTO dto=listN.get(i);
            
            data3[i][0]=dto.getBno()+"";
            data3[i][1]=dto.getBcategory1();
            data3[i][2]=dto.getBtitle();
            data3[i][3]=dto.getNickname();
            data3[i][4]=dto.getBregdate()+"";
            data3[i][5]=dto.getBviewcnt()+"";
            data3[i][6]=dto.getBgood()+"";
        }
        boardModel.setDataVector(data3, boardColNames);
        tbBoard.setModel(boardModel);
        
        //
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(5).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(6).setCellRenderer(dtcr);
    }
    
    //게시판 삭제
    private void deleteBoard() throws SQLException {
        String boardNo=tfBoardNo.getText();
        System.out.println("boardNo="+boardNo);
        
        if(boardNo==null || boardNo.isEmpty()){
            JOptionPane.showMessageDialog(this, "삭제할 번호를 입력해주세요.");
            tfBoardNo.requestFocus();
            return;
        }
        
        int type=JOptionPane.showConfirmDialog(this, boardNo+"번 게시물을 삭제하시겠습니까?",
                    "삭제", JOptionPane.YES_NO_OPTION);
        
        if(type==JOptionPane.YES_NO_OPTION){
            int cnt=boardDao.delBoradByNo(Integer.parseInt(boardNo));
            
            if(cnt>0){
                JOptionPane.showMessageDialog(this, "삭제 완료되었습니다");
            }else{
                JOptionPane.showMessageDialog(this, "삭제 실패했습니다.");
            }
        }//if
    }
    
    //회원 전체 조회
    private void showAllPerson() throws SQLException {
        
        List<PersonDTO>listP=personDao.personSelectAll();
        
        String[][] data=new String[listP.size()][personColNames.length];
        for(int i=0; i<listP.size(); i++){
            PersonDTO dto=listP.get(i);
            
            data[i][0]=dto.getPersonno()+"";
            data[i][1]=dto.getName();
            data[i][2]=dto.getBirth();
            data[i][3]=dto.getHp();
            data[i][4]=dto.getId();
            data[i][5]=dto.getNickname();
            data[i][6]=dto.getPetname();
            data[i][7]=dto.getEmail();
            data[i][8]=dto.getZipno()+"";
            data[i][9]=dto.getDetailaddress();
            data[i][10]=dto.getPoint()+"";
            data[i][11]=dto.getRegdate()+"";
        }
        personModel.setDataVector(data, personColNames);
        tbPerson.setModel(personModel);
        
        //
        
        tbPerson.getColumnModel().getColumn(6).setPreferredWidth(40);
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(8).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(10).setCellRenderer(dtcr);
       
    }
    
    //회원 번호 조회
    private void searchByPerNo() throws SQLException {
     String personno=tfPerNo.getText();
     System.out.println("번호:"+personno);
     
     List<PersonDTO>listNo=personDao.personSelectByNo(Integer.parseInt(personno));
     
     if(listNo==null || listNo.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당 회원이 없습니다.");
            //return;
        }
     
     String[][] data1=new String[listNo.size()][personColNames.length];
     for(int i=0; i<listNo.size(); i++){
         PersonDTO dto=listNo.get(i);
         
         data1[i][0]=dto.getPersonno()+"";
         data1[i][1]=dto.getName();
         data1[i][2]=dto.getBirth();
         data1[i][3]=dto.getHp();
         data1[i][4]=dto.getId();
         data1[i][5]=dto.getNickname();
         data1[i][6]=dto.getPetname();
         data1[i][7]=dto.getEmail();
         data1[i][8]=dto.getZipno()+"";
         data1[i][9]=dto.getDetailaddress();
         data1[i][10]=dto.getPoint()+"";
         data1[i][11]=dto.getRegdate()+"";
     }
        personModel.setDataVector(data1, personColNames);
        tbPerson.setModel(personModel);
        
        tbPerson.getColumnModel().getColumn(6).setPreferredWidth(40);
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(8).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(10).setCellRenderer(dtcr);
    }

    //회원 이름 조회
    private void searchByPerName() throws SQLException {
        String name = tfPerName.getText();
        System.out.println("이름:"+name);
        
        List<PersonDTO> listName=personDao.personSelectByName(name);
        
        if(listName==null || listName.isEmpty() || listName.size()==0){
            JOptionPane.showMessageDialog(this, "해당 회원이 없습니다.");
            return;
        }
        
        String[][] data=new String[listName.size()][personColNames.length];
        for(int i=0; i<listName.size(); i++){
            PersonDTO dto=listName.get(i);
            
            data[i][0]=dto.getPersonno()+"";
            data[i][1]=dto.getName();
            data[i][2]=dto.getBirth();
            data[i][3]=dto.getHp();
            data[i][4]=dto.getId();
            data[i][5]=dto.getNickname();
            data[i][6]=dto.getPetname();
            data[i][7]=dto.getEmail();
            data[i][8]=dto.getZipno()+"";
            data[i][9]=dto.getDetailaddress();
            data[i][10]=dto.getPoint()+"";
            data[i][11]=dto.getRegdate()+"";
        }
        personModel.setDataVector(data, personColNames);
        tbPerson.setModel(personModel);
        
        //
        tbPerson.getColumnModel().getColumn(6).setPreferredWidth(40);
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(8).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(10).setCellRenderer(dtcr);
    }

    //회원 아이디 조회
    private void searchByPerId() throws SQLException {
        String id=tfPerId.getText();
        System.out.println("아이디:"+id);
        
        List<PersonDTO> listI=personDao.personSelectById(id);
        
        if(listI==null || listI.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당 회원이 없습니다.");
            //return;
        }
        String[][] data=new String[listI.size()][personColNames.length];
        for(int i=0; i<listI.size(); i++){
            PersonDTO dto=listI.get(i);
            
            data[i][0]=dto.getPersonno()+"";
            data[i][1]=dto.getName();
            data[i][2]=dto.getBirth();
            data[i][3]=dto.getHp();
            data[i][4]=dto.getId();
            data[i][5]=dto.getNickname();
            data[i][6]=dto.getPetname();
            data[i][7]=dto.getEmail();
            data[i][8]=dto.getZipno()+"";
            data[i][9]=dto.getDetailaddress();
            data[i][10]=dto.getPoint()+"";
            data[i][11]=dto.getRegdate()+"";
        }
        personModel.setDataVector(data, personColNames);
        tbPerson.setModel(personModel);
        
        //
        tbPerson.getColumnModel().getColumn(6).setPreferredWidth(40);
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tbPerson.getColumnModel().getColumn(8).setCellRenderer(dtcr);
        tbPerson.getColumnModel().getColumn(10).setCellRenderer(dtcr);
    }
    
    private void deletePerson() throws SQLException {
        String personno=tfPerNo.getText();
        System.out.println("삭제할 번호:"+personno);
        
        if(personno==null || personno.isEmpty()){
            JOptionPane.showMessageDialog(this, "삭제할 번호를 입력해주세요.");
            tfPerNo.requestFocus();
            return;
        }
        
        int type=JOptionPane.showConfirmDialog(this, personno+"번을 회원을 삭제하시겠습니까?",
                    "삭제", JOptionPane.YES_NO_OPTION);
        if(type==JOptionPane.YES_NO_OPTION){
            int cnt=personDao.delPerByNo(Integer.parseInt(personno));
            
            if(cnt>0){
                JOptionPane.showMessageDialog(this, "삭제 완료되었습니다");
            }else{
                JOptionPane.showMessageDialog(this, "삭제 실패했습니다.");
            }
        }
        
    }
    
    
    private void clearTf() {
        tfProductNo.setText("");
        tfProductName.setText("");
        tfCategory.setText("");
        tfPrice.setText("");
        tfkcal.setText("");
        tfEatAge.setText("");
        tfFsize.setText("");
        tfPredis.setText("");
    }

    private void clearTf2() {
        tfBoardNo.setText("");
        tfTitle.setText("");
        tfNick.setText("");
    }
    
    private void clearTf3() {
        tfPerNo.setText("");
        tfPerName.setText("");
        tfPerId.setText("");
    }
    
    private void clearTf4() {
        tfInPdNo.setText("");
        tfInQty.setText("");
    }
    
}

