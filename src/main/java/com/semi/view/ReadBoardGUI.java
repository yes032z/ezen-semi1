/*
* Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
* Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
*/
package com.semi.view;
        
import com.semi.board.model.BoardDAO;
import com.semi.board.model.BoardDTO;
import com.semi.board.model.BoardService;
import com.semi.comments.model.CommentsDAO;
import com.semi.comments.model.CommentsDTO;
import com.semi.comments.model.CommentsService;
import com.semi.person.model.PersonService;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

        /**
         *
         * @author yes03
         */
        public final class ReadBoardGUI extends javax.swing.JFrame implements ActionListener{
            private DefaultTableModel model=new DefaultTableModel();
            private BoardDAO boardDao;
            private CommentsDAO commentsDao;
            private BoardDTO dto;
            
            /**
             * Creates new form ReadBoardGUI
             */
            public ReadBoardGUI() {
                initComponents();
                
                init();
                addEvent();
            }
            /**
             * This method is called from within the constructor to initialize the form.
             * WARNING: Do NOT modify this code. The content of this method is always
             * regenerated by the Form Editor.
             */
            @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lbTitle = new javax.swing.JLabel();
        lbNickName = new javax.swing.JLabel();
        lbRegdate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taBody = new javax.swing.JTextArea();
        lbCategory3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbCategory1 = new javax.swing.JLabel();
        lbCategory2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbComment = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        tfNickName = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        taCommentBody = new javax.swing.JTextArea();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btInsert = new javax.swing.JButton();
        btgood = new javax.swing.JToggleButton();
        cbCommentType = new javax.swing.JComboBox<>();
        lbViewCnt = new javax.swing.JLabel();
        lbGoodCnt = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitle.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        lbTitle.setText("제목 보이게 하는 라벨");

        lbNickName.setText("글작성자닉");

        lbRegdate.setText("등록일");

        jLabel7.setText("조회수 :");

        jLabel9.setText("좋아요 :");

        jLabel11.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel11.setText("▶");

        taBody.setColumns(20);
        taBody.setRows(5);
        jScrollPane3.setViewportView(taBody);

        lbCategory3.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        lbCategory3.setText("카테고리3");

        jLabel12.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel12.setText("▶");

        lbCategory1.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        lbCategory1.setText("카테고리1");

        lbCategory2.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        lbCategory2.setText("카테고리2");

        tbComment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                " ", "", "작성자", "내용", "작성일", "좋아요"
            }
        ));
        tbComment.setShowGrid(false);
        jScrollPane2.setViewportView(tbComment);

        jLabel8.setText("전체댓글");

        taCommentBody.setColumns(20);
        taCommentBody.setRows(5);
        jScrollPane5.setViewportView(taCommentBody);

        btUpdate.setText("수정");

        btDelete.setText("삭제");

        btInsert.setText("등록");

        btgood.setText("좋아요");

        cbCommentType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "댓글", "답글" }));

        lbViewCnt.setText("숫자");

        lbGoodCnt.setText("숫자");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbCategory3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbCategory1)
                                .addGap(18, 18, 18)
                                .addComponent(lbCategory2))
                            .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbNickName, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(lbRegdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbViewCnt)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbGoodCnt)
                        .addGap(34, 34, 34))))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btgood, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfNickName)
                            .addComponent(cbCommentType, 0, 105, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategory3)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCategory1)
                    .addComponent(lbCategory2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNickName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRegdate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbViewCnt)
                    .addComponent(lbGoodCnt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btgood, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfNickName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbCommentType, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadBoardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadBoardGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btInsert;
    private javax.swing.JButton btUpdate;
    private javax.swing.JToggleButton btgood;
    private javax.swing.JComboBox<String> cbCommentType;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbCategory1;
    private javax.swing.JLabel lbCategory2;
    private javax.swing.JLabel lbCategory3;
    private javax.swing.JLabel lbGoodCnt;
    private javax.swing.JLabel lbNickName;
    private javax.swing.JLabel lbRegdate;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbViewCnt;
    private javax.swing.JTextArea taBody;
    private javax.swing.JTextArea taCommentBody;
    private javax.swing.JTable tbComment;
    private javax.swing.JTextField tfNickName;
    // End of variables declaration//GEN-END:variables
    
    private void init() {
        boardDao=new BoardDAO();
        commentsDao=new CommentsDAO();
        dto=new BoardDTO();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setBackground(Color.white);
        taBody.setEditable(false);
        taBody.setLineWrap(true);
        try {
            readWriting(BoardService.getBno());
            readComments(BoardService.getBno());
            updateBViewCnt();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        String dtoNickname=dto.getNickname();
        String personNickname=PersonService.getNickname();
        tfNickName.setText(personNickname);
        tfNickName.setEditable(false);
        
        if(dtoNickname.equals(personNickname)){
            btDelete.setVisible(true);
            btUpdate.setVisible(true);
        }else{
            btDelete.setVisible(false);
            btUpdate.setVisible(false);
        }
    }
    
    private void addEvent() {
        btDelete.addActionListener(this);
        btInsert.addActionListener(this);
        btUpdate.addActionListener(this);
        btgood.addActionListener(this);
        
        tbComment.addMouseListener(new EventHandler());
    }
    
    class EventHandler extends MouseAdapter{
        
        @Override
        public void mousePressed(MouseEvent e) {
            int row = tbComment.getSelectedRow();
            Object objNo = tbComment.getValueAt(row, 0);
            int value=0;
            
            if(e.getSource()==tbComment){
                if(tbComment.getSelectedColumn()==0){
                    if (objNo instanceof Boolean) {
                        boolean bool = (boolean) objNo;
                        if (bool) {
                            cbCommentType.setSelectedIndex(0);
                        } else {
                            cbCommentType.setSelectedIndex(1);
                        }
                    }
                     objNo = tbComment.getValueAt(row, 2);
                    if (objNo instanceof String) {
                        String strNo = (String) objNo;
                        int no = Integer.parseInt(strNo);
                        CommentsService.setCono(no);
                    }else if(objNo instanceof Integer){
                        value=(int)objNo;
                        CommentsService.setCono(value);
                    }
                    
                }else{
                    //
                    objNo = tbComment.getValueAt(row, 2);
                    if (objNo instanceof String) {
                        String strNo = (String) objNo;
                        int no = Integer.parseInt(strNo);
                        CommentsService.setCono(no);
                    }else if(objNo instanceof Integer){
                        value=(int)objNo;
                        CommentsService.setCono(value);
                    }
                    
                    objNo = tbComment.getValueAt(row, 3);
                    if(objNo instanceof String){
                        String strNo =(String) objNo;
                        CommentsService.setType(strNo);
                        CoReCoDetails corecoDetails=new CoReCoDetails();
                        corecoDetails.setVisible(true);
                    }
                }
            }
        }
    }
    
        
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==btDelete){
            try {
                removeWriting(BoardService.getBno());
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btUpdate){
            if(lbCategory3.getText().equals("강아지")){
                BoardService.setBcategory3("강아지");
            }else if(lbCategory3.getText().equals("고양이")){
                BoardService.setBcategory3("고양이");
            }
            WriteGUI writeGui=new WriteGUI(WriteGUI.BOARD_EDIT);
            writeGui.setVisible(true);
            dispose();
        }else if(e.getSource()==btgood){
            try {
                updateBGood();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }else if(e.getSource()==btInsert){ //댓글,답글등록
            int index = cbCommentType.getSelectedIndex();
            try {
                if(index==0){
                    insertCM();
                }else if(index==1){
                    insertReCM();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }//if
        
    }

        public void readWriting(int no) throws SQLException {
        dto=boardDao.readBoard(no);
        lbCategory1.setText(dto.getBcategory1());
        lbCategory2.setText(dto.getBcategory2());
        lbCategory3.setText(dto.getBcategory3());
        lbTitle.setText(dto.getBtitle());
        lbNickName.setText(dto.getNickname());
        lbViewCnt.setText(dto.getBviewcnt()+"");
        lbGoodCnt.setText(dto.getBgood()+"");
        //taBody.setText(boardDto.getBimage());
        taBody.setText(dto.getBbody());
        lbRegdate.setText(dto.getBregdate()+"");
        }
        
        public void readComments(int no) throws SQLException {
        List<CommentsDTO> list=commentsDao.readComments(no);
        String[] colNames= {"   "," ","고유번호"," ","작성자","내용","작성일","좋아요"};
        Object[][] data=new Object[list.size()][8];
        
        for(int i=0;i<data.length;i++){
            CommentsDTO dto=list.get(i);
            
            
            data[i][0]=false;
            data[i][1]=dto.getRownum();
            data[i][2]=dto.getCono();
            data[i][3]=dto.getType();
            data[i][4]=dto.getNickname();
            data[i][5]=dto.getCobody();
            data[i][6]=dto.getCoregdate();
            data[i][7]=dto.getCogood();
            
            
            model.setDataVector(data, colNames);
            tbComment.setModel(model);
            CommentsService.setCono(dto.getCono());
            
            DefaultTableCellRenderer renderer = new MyDefaultTableCellRenderer();
            tbComment.getColumn("   ").setCellRenderer(renderer);
            tbComment.getColumn("   ").setCellEditor(new DefaultCellEditor(new JCheckBox()));
            
            
        }
        
     }
        
        private void removeWriting(int no) throws SQLException {
        int type=JOptionPane.showConfirmDialog(this, "정말 삭제하시겠습니까?");
        if(type==JOptionPane.YES_OPTION) {
        int cnt=boardDao.deleteBoard(no);
        
        if(cnt>0) {
        JOptionPane.showMessageDialog(this, "게시글이 삭제되었습니다.");
        BoarderGUI boarderGui=new BoarderGUI();
        boarderGui.setVisible(true);
        dispose();
        }else {
        JOptionPane.showMessageDialog(this,"게시글 삭제에 실패했습니다.");
        }
        }
        
        }
        
        private void updateBGood() throws SQLException {
        String dtoNickname=dto.getNickname();
        String personNickname=PersonService.getNickname();
        
        if(dtoNickname.equals(personNickname)){
        JOptionPane.showMessageDialog(this, "다른사람의 글만 추천 가능합니다.");
        return;
        }
        
        int bgood=Integer.parseInt(lbGoodCnt.getText());
        dto.setBgood(bgood);
        int cnt=boardDao.UpdateBGood(dto);
        if(cnt>0) {
        JOptionPane.showMessageDialog(this, "좋아요 완료!");
        readWriting(BoardService.getBno());
        readComments(BoardService.getBno());
        }else {
        JOptionPane.showMessageDialog(this, "좋아요 실패..");
        }
        
        }
        //게시판 조회수 증가
        private void updateBViewCnt() throws SQLException {
        String dtoNickname=dto.getNickname();
        String personNickname=PersonService.getNickname();
        
        if(dtoNickname.equals(personNickname)){
        System.out.println("자신의 게시글은 조회수가 올라가지 않게끔 설정");
        return;
        }
        int bviewcnt=Integer.parseInt(lbViewCnt.getText());
        dto.setBviewcnt(bviewcnt);
        int cnt=boardDao.UpdateVCnt(dto);
        if(cnt>0) {
        System.out.println("조회수 증가 성공");
        readWriting(BoardService.getBno());
        readComments(BoardService.getBno());
        }else {
        System.out.println("조회수 증가 실패");
        }
        }
        //댓글달기
        private void insertCM() throws SQLException {
        String cobody=taCommentBody.getText();
        int personno=PersonService.getPersonno();
        
        if(cobody==null||cobody.isEmpty()) {
        JOptionPane.showMessageDialog(rootPane, "내용을 입력해 주세요.");
        taCommentBody.requestFocus();
        return;
        }
        CommentsDTO cDto=new CommentsDTO();
        
        cDto.setCobody(cobody);
        cDto.setPersonno(personno);
        
        commentsDao=new CommentsDAO();
        int cnt=commentsDao.insertComment(cDto);
        
        if(cnt>0) {
        JOptionPane.showMessageDialog(rootPane, "댓글 등록에 성공했습니다.");
        readWriting(BoardService.getBno());
        readComments(BoardService.getBno());
        taCommentBody.setText("");
        }else {
        JOptionPane.showMessageDialog(rootPane, "댓글 등록에 실패했습니다.");
        }
        }
        
        //답글달기
        private void insertReCM() throws SQLException {
             String recobody=taCommentBody.getText();
             int personno=PersonService.getPersonno();
             int cono=CommentsService.getCono();
             
            if(recobody==null||recobody.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "내용을 입력해 주세요.");
            taCommentBody.requestFocus();
            return;
            }
            CommentsDTO dto=new CommentsDTO();

            dto.setCobody(recobody);
            dto.setPersonno(personno);
            dto.setCono(cono);

            commentsDao=new CommentsDAO();
            int cnt=commentsDao.insertReComment(dto);

            if(cnt>0) {
            JOptionPane.showMessageDialog(rootPane, "답글 등록에 성공했습니다.");
            readWriting(BoardService.getBno());
            readComments(BoardService.getBno());
            }else {
            JOptionPane.showMessageDialog(rootPane, "답글 등록에 실패했습니다.");
            }

         }

        private static class MyDefaultTableCellRenderer extends DefaultTableCellRenderer {
            
            public MyDefaultTableCellRenderer() {
            }
            
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if(column==0){
                    JCheckBox comp = null;
                    comp = new JCheckBox();
                    comp.setSelected(((Boolean)value).booleanValue());
                    return comp;
                }else{
                    return null;
                }
                
            }
        }
        
    }

            
 
