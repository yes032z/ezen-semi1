/*
* Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
* Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
*/

package com.semi.view;

import com.semi.board.model.BoardDAO;
import com.semi.board.model.BoardDTO;
import com.semi.board.model.BoardService;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ezen
 */
public class BoarderGUI extends javax.swing.JFrame implements ActionListener{
    private String[] colNames= {"번호","제목","작성자","작성일","조회수","좋아요"};
    private String[] colNames2={"번호","카테고리","제목","내용","작성자","작성일"};
    private DefaultTableModel model=new DefaultTableModel();
    //private DefaultTableModel model2=new DefaultTableModel();
    private BoardDAO boardDao;
    
    /** Creates new form BoarderGUI */
    public BoarderGUI() {
        initComponents();
        
        init();
        addEvent();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        btQnA = new javax.swing.JButton();
        btFeed = new javax.swing.JButton();
        btSupple = new javax.swing.JButton();
        btSnack = new javax.swing.JButton();
        btWalk = new javax.swing.JButton();
        btBehavior = new javax.swing.JButton();
        btInfomation = new javax.swing.JButton();
        btMissingPet = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbParenting = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbFreeBoard = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbSearch = new javax.swing.JTable();
        cbSearch = new javax.swing.JComboBox<>();
        tfSearch = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();
        btWriting = new javax.swing.JButton();
        btCare = new javax.swing.JButton();
        rbDog = new javax.swing.JRadioButton();
        rbCat = new javax.swing.JRadioButton();
        btMyInfo = new javax.swing.JButton();
        btBoard = new javax.swing.JButton();
        btMarket = new javax.swing.JButton();
        btHome = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btQnA.setText("QnA");

        btFeed.setText("사료");

        btSupple.setText("영양제");

        btSnack.setText("간식");

        btWalk.setText("외출/산책");

        btBehavior.setText("행동/교정");

        btInfomation.setText("정보공유(용품)");

        btMissingPet.setText("실종/목격");

        jTabbedPane1.setFont(new java.awt.Font("함초롬돋움", 1, 18)); // NOI18N

        tbParenting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "번호", "제목", "작성자", "작성일", "조회수", "좋아요"
            }
        ));
        tbParenting.setShowGrid(false);
        jScrollPane1.setViewportView(tbParenting);

        jTabbedPane1.addTab("육아톡톡", jScrollPane1);

        tbFreeBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "번호", "제목", "작성자", "작성일", "조회수", "좋아요"
            }
        ));
        tbFreeBoard.setShowGrid(false);
        jScrollPane2.setViewportView(tbFreeBoard);

        jTabbedPane1.addTab("수다방", jScrollPane2);

        tbSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "번호", "카테고리", "제목", "내용", "작성자", "작성일"
            }
        ));
        tbSearch.setShowGrid(false);
        jScrollPane3.setViewportView(tbSearch);

        jTabbedPane1.addTab("검색", jScrollPane3);

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "제목으로 검색", "작성자로 검색", "내용으로 검색" }));

        btSearch.setText("검색");

        btWriting.setText("글쓰기");

        btCare.setText("의료/치료");

        rbDog.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbDog);
        rbDog.setText("강아지");
        rbDog.setToolTipText("");

        rbCat.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbCat);
        rbCat.setText("고양이");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbDog, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbCat, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btQnA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btFeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btSupple, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btSnack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btWalk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btBehavior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btInfomation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btMissingPet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btCare, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btWriting, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(rbDog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbCat)
                        .addGap(12, 12, 12)
                        .addComponent(btQnA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btFeed, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSupple, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSnack, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btWalk, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btCare, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btBehavior, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btInfomation, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btMissingPet, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btWriting, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        btMyInfo.setText("내 정보");

        btBoard.setBackground(new java.awt.Color(204, 255, 255));
        btBoard.setText("게시판");

        btMarket.setText("마켓");

        btHome.setText("홈");

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btHome, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btMyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btMyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btHome, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoarderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoarderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoarderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoarderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoarderGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBehavior;
    private javax.swing.JButton btBoard;
    private javax.swing.JButton btCare;
    private javax.swing.JButton btFeed;
    private javax.swing.JButton btHome;
    private javax.swing.JButton btInfomation;
    private javax.swing.JButton btMarket;
    private javax.swing.JButton btMissingPet;
    private javax.swing.JButton btMyInfo;
    private javax.swing.JButton btQnA;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btSnack;
    private javax.swing.JButton btSupple;
    private javax.swing.JButton btWalk;
    private javax.swing.JButton btWriting;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbCat;
    private javax.swing.JRadioButton rbDog;
    private javax.swing.JTable tbFreeBoard;
    private javax.swing.JTable tbParenting;
    private javax.swing.JTable tbSearch;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
    
    private void init() {
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        boardDao=new BoardDAO();
        getContentPane().setBackground(Color.white);
        jPanel2.setBackground(Color.white);
        this.add(jPanel2);
        
        try {
            selectPrentingAll();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }
    
    private void addEvent() {
        btHome.addActionListener(this);
        btMarket.addActionListener(this);
        btBoard.addActionListener(this);
        btMyInfo.addActionListener(this);
        btWriting.addActionListener(this);
        btQnA.addActionListener(this);
        btFeed.addActionListener(this);
        btSupple.addActionListener(this);
        btSnack.addActionListener(this);
        btWalk.addActionListener(this);
        btCare.addActionListener(this);
        btBehavior.addActionListener(this);
        btInfomation.addActionListener(this);
        btMissingPet.addActionListener(this);
        tfSearch.addActionListener(this);
        btSearch.addActionListener(this);
        
        tbParenting.addMouseListener(new EventHandler());
        tbFreeBoard.addMouseListener(new EventHandler());
        tbSearch.addMouseListener(new EventHandler());
        
        cbSearch.addItemListener(new EventHandler());
        rbDog.addItemListener(new EventHandler());
        rbCat.addItemListener(new EventHandler());
        
        jTabbedPane1.addChangeListener(new EventHandler());
    }

    public JTabbedPane getjTabbedPane1() {
        return jTabbedPane1;
    }

    public void setjTabbedPane1(JTabbedPane jTabbedPane1) {
        this.jTabbedPane1 = jTabbedPane1;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            if(e.getSource()==btHome){
                this.dispose();
            }else if(e.getSource()==btMarket){
                MarketMainGUI marketMain=new MarketMainGUI();
                marketMain.setVisible(true);
                this.dispose();
            }else if(e.getSource()==btBoard){
                jTabbedPane1.setSelectedIndex(0);
                selectPrentingAll();
                tfSearch.setText("");
            }else if(e.getSource()==btMyInfo){
                MemberInfo f =new MemberInfo();
                f.setVisible(true);
            }else if(e.getSource()==btWriting){
                WriteGUI writeGui=new WriteGUI(WriteGUI.BOARD_REGISTER, this);
                writeGui.setVisible(true);
            }else if(e.getSource()==btQnA){
                BoardService.setBcategory2("QnA");
                jTabbedPane1.setSelectedIndex(2);
                selectPrentingType();
            }else if(e.getSource()==btFeed){
                 BoardService.setBcategory2("사료");
                jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btSupple){
                  BoardService.setBcategory2("영양제");
                jTabbedPane1.setSelectedIndex(2);
                  selectPrentingType();
            }else if(e.getSource()==btSnack){
                 BoardService.setBcategory2("간식");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btWalk){
                 BoardService.setBcategory2("외출/산책");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btCare){   
                 BoardService.setBcategory2("의료/치료");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btBehavior){
                 BoardService.setBcategory2("행동/교정");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btInfomation){
                 BoardService.setBcategory2("정보공유(용품)");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==btMissingPet){
                 BoardService.setBcategory2("실종/목격");
                 jTabbedPane1.setSelectedIndex(2);
                 selectPrentingType();
            }else if(e.getSource()==tfSearch || e.getSource()==btSearch){
                jTabbedPane1.setSelectedIndex(2);
                int index = cbSearch.getSelectedIndex();
                if(index==0){
                    searchByBtitle();
                }else if(index==1){
                    searchByNickname();
                }else if(index==2){
                    searchByBBody();
                }
            }
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void selectPrentingAll() throws SQLException {
        List<BoardDTO> list=boardDao.selPrentingAll();
        if(list.isEmpty()){
            JOptionPane.showMessageDialog(this, "데이터가 없습니다.");
            return;
        }
        String[][] data= new String[list.size()][colNames.length];
        for(int i=0;i<list.size();i++) {
            BoardDTO dto=list.get(i);
            data[i][0]=dto.getBno()+"";
            data[i][1]=dto.getBtitle();
            data[i][2]=dto.getNickname();
            data[i][3]=dto.getBregdate()+"";
            data[i][4]=dto.getBviewcnt()+"";
            data[i][5]=dto.getBgood()+"";
        }//for
        
        model.setDataVector(data, colNames);
        tbParenting.setModel(model);
        
    }
    
    
    private void searchByBtitle() throws SQLException{
        String btitle=tfSearch.getText();
        if(btitle==null || btitle.isEmpty()){
            JOptionPane.showMessageDialog(this, "검색하려는 제목을 입력하세요.");
            tfSearch.requestFocus();
            return;
        }
        
        List<BoardDTO> list=boardDao.selectTitle(btitle);
        if(list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "조회된 데이터가 없습니다.");
            tfSearch.requestFocus();
            return;
        }
        String[][] data= new String[list.size()][colNames2.length];
        for(int i=0;i<list.size();i++) {
            BoardDTO dto=list.get(i);
            data[i][0]=dto.getBno()+"";
            data[i][1]=dto.getBcategory1();
            data[i][2]=dto.getBtitle();
            data[i][3]=dto.getBbody();
            data[i][4]=dto.getNickname();
            data[i][5]=dto.getBregdate()+"";
            
            model.setDataVector(data, colNames2);
            tbSearch.setModel(model);
        }
    }
    
    private void searchByNickname() throws SQLException {
        String nickName=tfSearch.getText();
        if(nickName==null || nickName.isEmpty()){
            JOptionPane.showMessageDialog(this, "검색하려는 닉네임을 입력하세요.");
            tfSearch.requestFocus();
            return;
        }
        List<BoardDTO> list=boardDao.selectNickname(nickName);
        if(list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "조회된 데이터가 없습니다");
            tfSearch.requestFocus();
            return;
        }
        
        String[][] data= new String[list.size()][colNames2.length];
        for(int i=0;i<list.size();i++) {
            BoardDTO dto=list.get(i);
            data[i][0]=dto.getBno()+"";
            data[i][1]=dto.getBcategory1();
            data[i][2]=dto.getBtitle();
            data[i][3]=dto.getBbody();
            data[i][4]=dto.getNickname();
            data[i][5]=dto.getBregdate()+"";
        }
            model.setDataVector(data, colNames2);
            tbSearch.setModel(model);
        
    }
    
    private void searchByBBody() throws SQLException {
        String BBody=tfSearch.getText();
        if(BBody==null ||BBody.isEmpty()){
            JOptionPane.showMessageDialog(this, "검색하려는 내용을 입력하세요.");
            tfSearch.requestFocus();
            return;
        }
        List<BoardDTO> list=boardDao.selectBody(BBody);
        if(list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "조회된 데이터가 없습니다.");
            tfSearch.requestFocus();
            return;
        }
        
        String[][] data= new String[list.size()][colNames2.length];
        for(int i=0;i<list.size();i++) {
            BoardDTO dto=list.get(i);
            data[i][0]=dto.getBno()+"";
            data[i][1]=dto.getBcategory1();
            data[i][2]=dto.getBtitle();
            data[i][3]=dto.getBbody();
            data[i][4]=dto.getNickname();
            data[i][5]=dto.getBregdate()+"";
        }
            model.setDataVector(data, colNames2);
            tbSearch.setModel(model);
        }
        
    
    //육아톡톡 하위종류 조회
    private void selectPrentingType() throws SQLException {
         List<BoardDTO> list=boardDao.SelPrentingType();
            if(list.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "조회된 데이터가 없습니다.");
                tfSearch.requestFocus();
                return;
            }
            String category2=BoardService.getBcategory2();
            
            String[][] data= new String[list.size()][colNames2.length];
            for(int i=0;i<list.size();i++) {
                BoardDTO dto=list.get(i);
                data[i][0]=dto.getBno()+"";
                data[i][1]=category2;
                data[i][2]=dto.getBtitle();
                data[i][3]=dto.getBbody();
                data[i][4]=dto.getNickname();
                data[i][5]=dto.getBregdate()+"";
            }
                model.setDataVector(data, colNames2);
                tbSearch.setModel(model);

    }
    
    
    class EventHandler extends MouseAdapter implements ItemListener,ChangeListener {
        
        @Override
        public void mouseClicked(MouseEvent e) {
            Object objNo=null;
                if(e.getSource()==tbParenting){
                    int row=tbParenting.getSelectedRow();
                    objNo=tbParenting.getValueAt(row, 0);
                }else if(e.getSource()==tbFreeBoard){
                    int row=tbFreeBoard.getSelectedRow();
                    objNo=tbFreeBoard.getValueAt(row, 0);
                }else if(e.getSource()==tbSearch){
                    int row=tbSearch.getSelectedRow();
                    objNo=tbSearch.getValueAt(row, 0);
                }
                int no = Integer.parseInt((String)objNo);
                BoardService.setBno(no);
                ReadBoardGUI readBoardGui=new ReadBoardGUI();
                readBoardGui.setVisible(true);
        }
        
        @Override
        public void itemStateChanged(ItemEvent e) {
            try {
                if(e.getSource()==cbSearch){
                    if(e.getStateChange()==ItemEvent.SELECTED){
                        tfSearch.requestFocus();
                    }
                }else if(e.getSource()==rbDog){
                    jTabbedPane1.setSelectedIndex(2);
                    tfSearch.setText("");
                    searchDog();
                }else if(e.getSource()==rbCat){
                    jTabbedPane1.setSelectedIndex(2);
                    tfSearch.setText("");
                    searchCat();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        
        @Override
        public void stateChanged(ChangeEvent e) {
            int index=jTabbedPane1.getSelectedIndex();
            try {
                if(index==0){
                    tfSearch.setText("");
                    selectPrentingAll();
                }else if(index==1){
                    tfSearch.setText("");
                    selectFBoardAll();
                }else if(index==2){
                    tfSearch.requestFocus();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        
        //수다방 전체조회
        private void selectFBoardAll() throws SQLException {
            List<BoardDTO> list2=boardDao.selFreeBoardAll();
            if(list2.isEmpty()){
                JOptionPane.showMessageDialog(rootPane, "데이터가 없습니다.");
                return;
            }
            String[][] data= new String[list2.size()][colNames.length];
            for(int i=0;i<list2.size();i++) {
                BoardDTO dto=list2.get(i);
                data[i][0]=dto.getBno()+"";
                data[i][1]=dto.getBtitle();
                data[i][2]=dto.getNickname();
                data[i][3]=dto.getBregdate()+"";
                data[i][4]=dto.getBviewcnt()+"";
                data[i][5]=dto.getBgood()+"";
            }//for
            
            model.setDataVector(data, colNames);
            tbFreeBoard.setModel(model);
        }
        //강아지글 전체조회
        private void searchDog() throws SQLException {
            List<BoardDTO> list=boardDao.selectDog();
            if(list.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "조회된 데이터가 없습니다.");
                tfSearch.requestFocus();
                return;
            }
            
            String[][] data= new String[list.size()][colNames2.length];
            for(int i=0;i<list.size();i++) {
                BoardDTO dto=list.get(i);
                data[i][0]=dto.getBno()+"";
                data[i][1]=dto.getBcategory1();
                data[i][2]=dto.getBtitle();
                data[i][3]=dto.getBbody();
                data[i][4]=dto.getNickname();
                data[i][5]=dto.getBregdate()+"";
            }
                model.setDataVector(data, colNames2);
                tbSearch.setModel(model);
}
        //고양이글 전체조회
        private void searchCat() throws SQLException {
            List<BoardDTO> list=boardDao.selectCat();
            if(list.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "조회된 데이터가 없습니다.");
                tfSearch.requestFocus();
                return;
            }
            
            String[][] data= new String[list.size()][colNames2.length];
            for(int i=0;i<list.size();i++) {
                BoardDTO dto=list.get(i);
                data[i][0]=dto.getBno()+"";
                data[i][1]=dto.getBcategory1();
                data[i][2]=dto.getBtitle();
                data[i][3]=dto.getBbody();
                data[i][4]=dto.getNickname();
                data[i][5]=dto.getBregdate()+"";
            }
                model.setDataVector(data, colNames2);
                tbSearch.setModel(model);   
        }        
    }//내부클래스
}
    

