/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.semi.view;

import com.semi.zipcode.model.ZipcodeDAO;
import com.semi.zipcode.model.ZipcodeDTO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author pjm02
 */
public class ZipcodeGUI extends javax.swing.JFrame implements ActionListener{
    private MemberFrame memberFrame;
    private DefaultTableModel model = new DefaultTableModel();
    private MemberInfo memberInfo;
    private OrderGUI orderGui;
    
    /**
     * Creates new form ZipcodeGUI
     */
    public ZipcodeGUI() {
        initComponents();
        
        init();
        addEvent();
    }
    
    public ZipcodeGUI(MemberFrame memberFrame){
        this();
        this.memberFrame=memberFrame;
    }
    public ZipcodeGUI(OrderGUI orderGui){
        this();
        this.orderGui=orderGui;
    }
    public ZipcodeGUI(MemberInfo memberInfo){
        this();
        this.memberInfo=memberInfo;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfSearch = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbBody = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btSearch.setText("검색");

        jLabel1.setText("지역명(읍면동)");

        tbBody.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "우편번호", "시도", "구군", "동", "번지"
            }
        ));
        jScrollPane1.setViewportView(tbBody);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZipcodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZipcodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZipcodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZipcodeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZipcodeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBody;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    private void addEvent() {
        btSearch.addActionListener(this);
        tfSearch.addActionListener(this);
        tbBody.addMouseListener(new EventHandler());
    }
    
    class EventHandler extends MouseAdapter{

        @Override
        public void mousePressed(MouseEvent e) {
            int row=tbBody.getSelectedRow();
            String address="";
            String zipcode=tbBody.getValueAt(row, 0).toString();
            for(int i=1; i<=3; i++){
                String str=(String)tbBody.getValueAt(row, i);
                address+=str+" ";
            }//for
            if(memberFrame!=null){
                memberFrame.tfZipcode.setText(zipcode);
                memberFrame.tfAddress.setText(address);
            }else if(orderGui!=null){
                orderGui.tfAddress1.setText(address);
                orderGui.tfZipcodeno.setText(zipcode);
            }
            ZipcodeGUI.this.dispose();
        }
        
    }

    private void init() {
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==btSearch || e.getSource()==tfSearch){
            try {
                searchZipcode();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void searchZipcode() throws SQLException {
        String dong=tfSearch.getText();
        if(dong==null || dong.isEmpty()){
            JOptionPane.showMessageDialog(this, "동을 입력해주세요.");
            tfSearch.requestFocus();
            return;
        }
        
        ZipcodeDAO zipcodeDao = new ZipcodeDAO();
        List<ZipcodeDTO> list = zipcodeDao.selectZipcode(dong);
        
        if(list==null || list.isEmpty()){
            JOptionPane.showMessageDialog(this, "해당하는 주소가 없습니다.");
        }
        
        String[] colName={"우편번호", "시도", "구군", "동", "번지"};
        String[][] data=new String[list.size()][colName.length];
        for(int i=0; i<list.size(); i++){
            ZipcodeDTO dto=list.get(i);
            
            String zipcode=dto.getZipcodeno();
            
            data[i][0]=zipcode;
            data[i][1]=dto.getSido();
            data[i][2]=dto.getGugun();
            data[i][3]=dto.getDong();
            
            String bunji=dto.getStartbunji();
            String endbunji=dto.getEndbunji();
            if(endbunji!=null && endbunji.isEmpty()){
                bunji+="~"+endbunji;
            }//if
            data[i][4]=bunji;
            
        }//for
        
        model.setDataVector(data, colName);
        tbBody.setModel(model);
    }
}
